#include <iostream>
using namespace std;

#define MAX 5  // Maximum size of the circular queue

class CircularQueue {
private:
    int arr[MAX];
    int front, rear;

public:
    // Constructor to initialize the queue
    CircularQueue() {
        front = -1;
        rear = -1;
    }

    // Function to add an element to the queue
    void enqueue(int value) {
        if ((front == 0 && rear == MAX - 1) || (rear + 1 == front)) {
            cout << "Queue Overflow! Cannot enqueue " << value << endl;
            return;
        }
        if (front == -1) { // First element
            front = rear = 0;
        } else if (rear == MAX - 1 && front != 0) { // Wrap around
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = value;
        cout << value << " enqueued into the circular queue." << endl;
    }

    // Function to remove an element from the queue
    void dequeue() {
        if (front == -1) {
            cout << "Queue Underflow! Cannot dequeue." << endl;
            return;
        }
        cout << arr[front] << " dequeued from the circular queue." << endl;

        if (front == rear) { // Only one e
